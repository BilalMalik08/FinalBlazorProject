@page "/Cart"
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IShoppingCartRepository _shoppingCartRepository
@attribute [Authorize]

<title>Cart</title>

@if (isProcessing)
{
	<div class="d-flex justify-content-center align-items-center" style="height:85vh">
		<img src="/images/loading.gif" alt="loading" />
	</div>
}
else
{
	<div class="row w-100">
		<div class="col-lg-6 col-12">
			<div class="container p-4 m-2">
				<h4 class="text-center text-success display-6">
					Cart Summary
				</h4>


				@foreach(var cartItem in ShoppingCarts)
				{
					<div class="d-flex p-2 m-2">
						<div class="card flex-row w-100">
							<img class="card-img-left" style="width: 120px;" src="@(cartItem.Product.ImageUrl ?? "/images/default.png")" alt="ProductImage">
							<div class="card-body">
								<div class="d-flex justify-content-between align-items-center">
									<h4 class="">
										@cartItem.Product.Name
									</h4>
									<h4>
										@cartItem.Product.Price.ToString("C");
									</h4>
								</div>
								<div class="flex-fill">
									<h4 class="text-danger">
										@((cartItem.Product.Price * cartItem.Count).ToString("C"));
									</h4>
								</div>
								<div class="d-flex justify-content-between align-items-center">
									<div class="d-flex justify-content-between g-0">
										<span>
											<i class="bi bi-dash-circle-fill btn text-secondary"></i>
										</span>
										<span class="ml-1 me-1">
											<b class="lead">@cartItem.Count</b>
										</span>
										<span>
											<i class="bi bi-plus-circle-fill btn text-secondary"></i>
										</span>
									</div>
									<button class="btn btn-danger">Remove</button>
								</div>
							</div>
						</div>
					</div>
				}

			</div>
		</div>
		<div class="col-lg-6 col-12 p-4">
			<div class="card">
				<div class="card-header text-success text-center display-6">
					Pickup Details
				</div>
				<div class="card-body">
					<form>
						<div class="form-group">
							<label>Name</label>
							<input type="text" class="form-control" />
						</div>
						<div class="form-group">
							<label>Email</label>
							<input type="text" class="form-control" />
						</div>
						<div class="form-group">
							<label>Phone</label>
							<input type="text" class="form-control" />
						</div>

					</form>
					<div class="card mt-4 bg-light">
						<div class="card-body">
							<h4>
								Grand Total: --$$--
							</h4>
							<h4>
								No. of Items: --COUNT--
							</h4>
						</div>

					</div>
				</div>

				<button class="btn btn-success m-4">
					Looks Good? Place Order!
				</button>
			</div>
		</div>
	</div>
}


@code {
	private IEnumerable<ShoppingCart> ShoppingCarts = new List<ShoppingCart>();
	private bool isProcessing { get; set; } = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadCart();
			isProcessing = false;
			StateHasChanged();
		}
	}

	private async Task LoadCart()
	{
		var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		ShoppingCarts = await _shoppingCartRepository.GetAllAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value);
	}
}
