@page "/Cart"
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IShoppingCartRepository _shoppingCartRepository
@inject IJSRuntime _JS
@attribute [Authorize]

<title>Cart</title>

<!-- Modal for item removal confirmation -->
<BsModal OnModalConfirmation="ConfirmRemoveItem"
         ButtonBootstrapStyle="btn-danger"
         ButtonText="Remove"
         Title="Are you sure you want to remove this item from the cart?">
</BsModal>

@if (isProcessing)
{
    <div class="d-flex justify-content-center align-items-center" style="height:85vh">
        <img src="/images/loading.gif" alt="loading" class="img-fluid" />
    </div>
}
else
{
    <div class="container my-3">
        @if (ShoppingCarts.Any())
        {
            <div class="row justify-content-center align-items-start g-4">
                <div class="col-lg-6 col-md-6 col-sm-12 d-flex mb-4">
                    <div class="card shadow border-0 bg-dark bg-gradient text-white d-flex flex-column mb-2" style="flex: 1;">
                        <div class="card-header text-center bg-black bg-gradient">
                            <h4 class="text-success mb-4">Cart Summary</h4>
                        </div>
                        <div class="card-body flex-fill">
                            @foreach (var cartItem in ShoppingCarts)
                            {
                                <div class="card mb-3 bg-dark bg-gradient text-white">
                                    <div class="row g-0 align-items-center">
                                        <div class="col-4">
                                            <img src="@(cartItem.Product.ImageUrl ?? "/images/default.png")" class="img-fluid rounded-start" alt="ProductImage">
                                        </div>
                                        <div class="col-8">
                                            <div class="card-body">
                                                <h5 class="card-title">@cartItem.Product.Name</h5>
                                                <p class="card-text">
                                                    <strong>Price:</strong> @cartItem.Product.Price.ToString("C") <br />
                                                    <strong>Total:</strong> @((cartItem.Product.Price * cartItem.Count).ToString("C"))
                                                </p>
                                                <div class="d-flex justify-content-between align-items-center flex-wrap">
                                                    <div class="input-group input-group-sm mb-2" style="width: 120px;">
                                                        <button @onclick="()=>UpdateCartItem(cartItem.ProductId, -1)" class="btn btn-outline-secondary" type="button">
                                                            <i class="bi bi-dash-circle-fill"></i>
                                                        </button>
                                                        <input type="text" class="form-control text-center" value="@cartItem.Count" readonly />
                                                        <button @onclick="()=>UpdateCartItem(cartItem.ProductId, 1)" class="btn btn-outline-secondary" type="button">
                                                            <i class="bi bi-plus-circle-fill"></i>
                                                        </button>
                                                    </div>
                                                    <button @onclick="() => HandleItemRemoveConfirmation(cartItem.ProductId)" class="btn btn-danger btn-sm">Remove</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-lg-6 col-md-6 col-sm-12 d-flex mb-4">
                    <div class="card shadow border-0 bg-dark bg-gradient text-white d-flex flex-column" style="flex: 1;">
                        <div class="card-header text-center bg-black bg-gradient">
                            <h4 class="text-success mb-4">Pickup Details</h4>
                        </div>
                        <EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="card-body flex-fill">
                                <div class="form-floating mb-3 text-dark">
                                    <InputText @bind-Value="@OrderHeader.Name" class="form-control" id="name" placeholder="Name" />
                                    <label for="name">Name</label>
                                    <ValidationMessage For="@(() => OrderHeader.Name)" />
                                </div>
                                <div class="form-floating mb-3 text-dark">
                                    <InputText @bind-Value="@OrderHeader.Email" class="form-control" id="email" placeholder="Email" />
                                    <label for="email">Email</label>
                                    <ValidationMessage For="@(() => OrderHeader.Email)" />
                                </div>
                                <div class="form-floating mb-3 text-dark">
                                    <InputText @bind-Value="@OrderHeader.PhoneNumber" class="form-control" id="phone" placeholder="Phone" />
                                    <label for="phone">Phone</label>
                                    <ValidationMessage For="@(() => OrderHeader.PhoneNumber)" />
                                </div>

                                <div class="card mt-4 bg-light">
                                    <div class="card-body">
                                        <h4>Grand Total: @OrderHeader.OrderTotal.ToString("C")</h4>
                                        <h4>No. of Items: @TotalItems</h4>
                                    </div>
                                </div>
                            </div>

                            <div class="card-footer text-center">
                                <button type="submit" class="btn btn-secondary w-100">
                                    Looks Good? Place Order!
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-warning text-center" role="alert">
                Your Cart is empty.
            </div>
        }
    </div>
}

@code {
    private IEnumerable<ShoppingCart> ShoppingCarts = new List<ShoppingCart>();
    private bool isProcessing { get; set; } = true;
    [SupplyParameterFromForm]
    public OrderHeader OrderHeader { get; set; } = new OrderHeader();
    private int TotalItems { get; set; } = 0;
    private int itemToRemoveId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        OrderHeader.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        OrderHeader.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        OrderHeader.Status = SD.StatusPending;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCart()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        ShoppingCarts = await _shoppingCartRepository.GetAllAsync(OrderHeader.UserId);

        OrderHeader.OrderTotal = 0;
        TotalItems = 0;
        foreach (var cart in ShoppingCarts)
        {
            OrderHeader.OrderTotal += (Convert.ToDouble(cart.Product.Price) * cart.Count);
            TotalItems += cart.Count;
        }
        OrderHeader.OrderTotal = Math.Round(OrderHeader.OrderTotal, 2);
    }

    private async Task UpdateCartItem(int productId, int updateBy)
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;

        if (authenticated)
        {
            var result = await _shoppingCartRepository.UpdateCartAsync(OrderHeader.UserId, productId, updateBy);
            await LoadCart();

            if (result)
            {
                _JS.ToastrSuccess("Cart updated successfully.");
            }
            else
            {
                _JS.ToastrError("Failed to update cart.");
            }
        }
    }

    private void HandleItemRemoveConfirmation(int productId)
    {
        itemToRemoveId = productId;
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    public async Task ConfirmRemoveItem(bool isConfirmed)
    {
        if (isConfirmed)
        {
            var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var result = await _shoppingCartRepository.UpdateCartAsync(OrderHeader.UserId, itemToRemoveId, -10000);
            await LoadCart();

            if (result)
            {
                _JS.ToastrSuccess("Item removed from cart successfully.");
            }
            else
            {
                _JS.ToastrError("Failed to remove item from cart.");
            }
        }
        _JS.InvokeVoidAsync("HideConfirmationModal");
    }

    private async Task ProcessOrderCreation()
    {
        // Implementation for processing the order creation
    }
}