@page "/product"
@inject IProductRepository _productRepository
@inject IJSRuntime _JS
<link rel="stylesheet" href="css/productList.css" />

<BsModal OnModalConfirmation="ConfirmDelete_Click"
         ButtonBootstrapStyle="btn-danger"
         ButtonText="Delete"
         Title="Are you sure you want to delete this product?">
</BsModal>

@if (isProcessing)
{
    <div class="ProductList-Loading">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4 ProductList-CARD">
        <div class="card-header bg-black bg-gradient ml-0 py-3 ProductList-HEADER">
            <div class="col-12 text-center">
                <h2 class="text-white py-2 ProductList-HEADING">Product List <i class="bi bi-boxes"></i></h2>
            </div>
        </div>
        <div class="card-body p-4 ProductList-CARD-BODY">
            <div class="row pb-3">
                <div class="col-12 text-end ProductList-BUTTON-Div">
                    <a href="product/create" class="btn btn-secondary btn-lg ProductList-BUTTON" style="width:250px;"><i class="bi bi-plus-square"></i> Add New Product</a>
                </div>
            </div>
            @if (Products.Any())
            {
                <table class="table table-bordered table-striped ProductList-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Special Tag</th>
                            <th>Description</th>
                            <th>Category</th>
                            <th>Action Buttons</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in Products)
                        {
                            <tr>
                                <td>@obj.Name</td>
                                <td>@obj.Price.ToString("C")</td>
                                <td><span class="badge text-bg-success">@obj.SpecialTag</span></td>
                                <td>@obj.Description</td>
                                <td>@obj.Category.Name</td>
                                <td>
                                    <a href="@($"product/update/{obj.Id}")" class="btn btn-secondary"><i class="bi bi-pencil-square"></i> Edit</a>
                                    <a class="btn btn-danger" @onclick="() => HandleDelete(obj.Id)"><i class="bi bi-trash"></i> Delete</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private bool isProcessing { get; set; } = true;
    private int DeleteProductID { get; set; } = 0;
    private IEnumerable<Product> Products = new List<Product>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
    }

    private async Task HandleDelete(int id)
    {
        DeleteProductID = id;
        await _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    [JSInvokable]
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        await _JS.InvokeVoidAsync("HideConfirmationModal");
        isProcessing = true;
        if (isConfirmed && DeleteProductID != 0)
        {
            var result = await _productRepository.DeleteAsync(DeleteProductID);
            if (result)
            {
                await _JS.InvokeVoidAsync("toastr.success", "Product deleted successfully.");
            }
            else
            {
                await _JS.InvokeVoidAsync("toastr.error", "Failed to delete product.");
            }
            await LoadProducts();
        }
        DeleteProductID = 0;
        isProcessing = false;
        StateHasChanged();
    }
}