@page "/"
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JS
@inject NavigationManager _NavigationManager
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IShoppingCartRepository _shoppingCartRepository
<link rel="stylesheet" href="css/home.css" />

<PageTitle>Home</PageTitle>

@if (isProcessing)
{
    <div class="d-flex justify-content-center align-items-center Home-Loading">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">
        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">
                <div class="d-flex align-items-center justify-content-center" style="width: 100%;">
                    <input type="text" class="form-control rounded-pill search-bar" placeholder="Search for Food Items!" style="width: 100%; padding: 15px;" @oninput="@(e => FilterProductsByName(e.Value.ToString()))" value="@_searchText">
                    <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
        </div>

        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item">
                    <span class="@GetActiveTabClass(0)" style="cursor: pointer" @onclick="() => FilterProducts(0)">All</span>
                </li>
                @foreach (var Category in Categories)
                {
                    <li class="nav-item">
                        <span class="@GetActiveTabClass(Category.Id)" style="cursor: pointer" @onclick="() => FilterProducts(Category.Id)">@Category.Name</span>
                    </li>
                }
            </ul>
            @if (!FilteredProducts.Any())
            {
                <div class="alert alert-warning text-center">
                    No products found.
                </div>
            }
            else
            {
                <div class="row mt-4 mx-1">
                    @foreach (var Prod in FilteredProducts)
                    {
                        <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                            <div class="card bg-dark text-white">
                                <div class="mt-3 mb-2 row">
                                    <div class="col-6 px-3">
                                        <i class="bi bi-star btn btn-outline-warning ms-1 disabled"> @Prod.SpecialTag</i>
                                    </div>
                                    <div class="col-6 text-end px-3 text-success h3 pe-4">
                                        @Prod.Price.ToString("C")
                                    </div>
                                </div>
                                <div class="text-center">
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2"
                                         src="@(!string.IsNullOrEmpty(Prod.ImageUrl) ? Prod.ImageUrl : "images/default.png")"
                                         alt="@Prod.Name" />
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title text-center lead text-white">@Prod.Name</h5>
                                    <p class="card-text mt-2">@((MarkupString)Prod.Description)</p>
                                    <h4 class="text-center">
                                      <div class="m-lg-auto p-2" @onclick="()=>AddOrderItem(Prod)">
                                            <button class="btn btn-secondary AddToCart-BTN w-100" style="font-size: 1rem;">Add to cart <i class="bi bi-cart4 "></i></button>
                                      </div>
                                    </h4>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<Product> FilteredProducts = new List<Product>();
    private bool isProcessing { get; set; } = true;
    private int _selectedCategoryId = 0;
    private string _searchText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
        Categories = await _categoryRepository.GetAllAsync();
        FilterProducts(_selectedCategoryId);
    }

    private void FilterProducts(int categoryId)
    {
        if (categoryId == 0)
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products.Where(p => p.CategoryId == categoryId).ToList();
        }
        _selectedCategoryId = categoryId;
        _searchText = "";
    }

    private void FilterProductsByName(string newValueOfSearchText)
    {
        if (string.IsNullOrWhiteSpace(newValueOfSearchText))
        {
            FilterProducts(_selectedCategoryId);
        }
        else
        {
            FilteredProducts = Products
                .Where(u => u.Name.Contains(newValueOfSearchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }
        _searchText = newValueOfSearchText;
    }

    private string GetActiveTabClass(int categoryId)
    {
        return categoryId == _selectedCategoryId ? "nav-link active" : "nav-link";
    }

    private async Task AddOrderItem(Product product)
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;

        if (!authenticated)
        {
            _NavigationManager.NavigateTo("Account/Login");
        }
        else
        {
            var result = await 
            _shoppingCartRepository.UpdateCartAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value, product.Id, 1);

            if (result)
            {
                _JS.ToastrSuccess("Item added to cart successfully.");
            }
            else
            {
                _JS.ToastrError("Failed to add item in cart.");
            }
        }
    }
}
