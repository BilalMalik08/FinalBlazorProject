@page "/Order/List"
@inject IOrderRepository _orderRepository
@inject NavigationManager _NavigationManager
@attribute [Authorize]
<link rel="stylesheet" href="/css/orderList.css" />

<PageTitle>Order List</PageTitle>

@if (isProcessing)
{
    <div class="d-flex justify-content-center align-items-center" style="height:85vh">
        <img src="/images/loading.gif" alt="loading" class="img-fluid" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4 OrderList-CARD">
        <div class="card-header bg-black bg-gradient ml-0 py-3 OrderList-HEADER">
            <div class="col-12 text-center">
                <h2 class="text-white py-2 OrderList-HEADING">Order List <i class="bi bi-card-list"></i></h2>
            </div>
        </div>
        <div class="card-body p-4 OrderList-CARD-BODY">
            @if (OrderHeaders.Any())
            {

                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@OrderHeaders" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
                    <Columns>
                        <RadzenDataGridColumn Property="Id" Filterable="true" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" Width="120px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="120px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Property="Email" Title="Email" Width="200px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Property="OrderTotal" Title="Order Total" FormatString="{0:C}" Width="120px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}" Width="120px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Property="Status" Title="Status" Width="160px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="orderHeader">
                                <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Secondary" Click="@(()=>_NavigationManager.NavigateTo($"order/details/{orderHeader.Id}"))"></RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>

            }
        </div>
    </div>
}

@code {
    private bool isProcessing { get; set; } = true;

    private IEnumerable<OrderHeader> OrderHeaders = new List<OrderHeader>();

    private bool? IsAdmin { get; set; }

    private string? UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrderHeader();
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadOrderHeader()
    {
        isProcessing = true;
        StateHasChanged();
        await CheckAuthorization();
        if (IsAdmin == true)
        {
            OrderHeaders = await _orderRepository.GetAllAsync();
        }
        else
        {
            OrderHeaders = await _orderRepository.GetAllAsync(UserId);
        }
        isProcessing = false;
    }

    private async Task CheckAuthorization()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            IsAdmin = user?.IsInRole(SD.Role_Admin);
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }
}