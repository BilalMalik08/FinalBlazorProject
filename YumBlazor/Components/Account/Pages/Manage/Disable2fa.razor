@page "/Account/Manage/Disable2fa"

@using Microsoft.AspNetCore.Identity
@using YumBlazor.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Disable2fa> Logger

<PageTitle>Disable two-factor authentication (2FA)</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow border-0 bg-dark bg-gradient text-white">
                <div class="card-header bg-warning text-center">
                    <h3 class="my-3">Disable Two-Factor Authentication (2FA)</h3>
                </div>
                <div class="card-body">
                    <StatusMessage />

                    <div class="alert alert-warning" role="alert">
                        <p>
                            <strong>This action only disables 2FA.</strong>
                        </p>
                        <p>
                            Disabling 2FA does not change the keys used in authenticator apps. If you wish to change the key
                            used in an authenticator app you should <a href="Account/Manage/ResetAuthenticator" class="alert-link">reset your authenticator keys</a>.
                        </p>
                    </div>

                    <form @formname="disable-2fa" @onsubmit="OnSubmitAsync" method="post">
                        <AntiforgeryToken />
                        <button class="w-100 btn btn-lg btn-danger" type="submit">Disable 2FA</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        if (HttpMethods.IsGet(HttpContext.Request.Method) && !await UserManager.GetTwoFactorEnabledAsync(user))
        {
            throw new InvalidOperationException("Cannot disable 2FA for user as it's not currently enabled.");
        }
    }

    private async Task OnSubmitAsync()
    {
        var disable2faResult = await UserManager.SetTwoFactorEnabledAsync(user, false);
        if (!disable2faResult.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred disabling 2FA.");
        }

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has disabled 2fa.", userId);
        RedirectManager.RedirectToWithStatus(
            "Account/Manage/TwoFactorAuthentication",
            "2FA has been disabled. You can reenable 2FA when you set up an authenticator app.",
            HttpContext);
    }
}