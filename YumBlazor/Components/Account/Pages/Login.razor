@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using YumBlazor.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1 class="text-center my-4 bg-black text-white">Log in <i class="bi bi-box-arrow-in-right"></i></h1>

<div class="container my-3">
    <div class="row justify-content-center align-items-start">
        <div class="col-lg-5 col-md-6 col-sm-8">
            <div class="card shadow border-0 bg-dark bg-gradient text-white">
                <div class="card-header text-center bg-black bg-gradient">
                    <h2 class="my-3">Use a Local Account to Log In</h2>
                </div>
                <div class="card-body">
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="form-floating mb-3 text-dark">
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email">Email</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3 text-dark">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <label for="password">Password</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>

                        <div class="checkbox mb-3">
                            <label class="form-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                Remember me
                            </label>
                        </div>

                        <button type="submit" class="btn btn-secondary w-100 btn-lg"><i class="bi bi-box-arrow-in-right"></i> Log in</button>
                    </EditForm>

                    <hr class="my-4" />

                    <div class="mt-4 text-center">
                        <a href="/Account/ForgotPassword" class="text-light">Forgot your password?</a><br />
                        <a href="/Account/Register" class="text-light">Register as a new user</a><br />
                        <a href="/Account/ResendEmailConfirmation" class="text-light">Resend email confirmation</a>
                    </div>

                    <hr class="my-4" />
                    <div class="text-center">
                        <p>Don't have an account yes? <a href="Account/Register" class="text-white">Sign up</a></p>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-5 col-md-6 col-sm-8 mt-4 mt-md-0">
            <div class="card shadow border-0 bg-dark bg-gradient text-white">
                <div class="card-header text-center bg-black bg-gradient">
                    <h3 class="my-3">Use Another Service</h3>
                </div>
                <div class="card-body">
                    <ExternalLoginPicker />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}